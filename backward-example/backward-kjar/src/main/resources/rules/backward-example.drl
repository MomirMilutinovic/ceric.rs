package rules;

import com.ftn.sbnz.backward.model.models.Location;
import com.ftn.sbnz.backward.model.models.Watch;
import com.ftn.sbnz.backward.model.models.Question;
import com.ftn.sbnz.backward.model.models.Recommendation;
import java.lang.Double;
import java.util.List;
import org.springframework.data.jpa.domain.Specification;

global com.ftn.sbnz.backward.kjar.IQuestionRepository questionRepository;

query findQuestionById (Long id)
    $question: Question(id == id)
end

query nextQuestion ()
    $question: Question(isNotAnswered())
    not (Question((priority > $question.priority) && isNotAnswered()))
end

query recommendations ()
    $recommendation: Recommendation()
end

rule "questionnaireStart" salience 20
    when
        not (Question())
    then
        insert(questionRepository.findById(1L).get());
end

rule "setBudget"
    when
        $question: Question(id == 1 && !isNotAnswered())
        $recommendation: Recommendation($watch: watch, $watch.getPrice() > Double.parseDouble($question.getAnswer().get()))
    then
        delete($recommendation);
end

rule "couldBeInvesting"
    when
        $question: Question(id == 1 && !isNotAnswered() && (Double.parseDouble(getAnswer().get()) > 10000))
    then
        System.out.println("Other Question asked");
        insert(questionRepository.findById(2L).get());
end

rule "isInvesting"
    when
        $question: Question(id == 2 && !isNotAnswered() && getAnswer().get().equals("Investment only"))
        $recommendation: Recommendation($brand: watch.brand)
        not(String(this == $brand) from ["Audemars Piguet", "Rolex", "Patek Phillipe"])
    then
        delete($recommendation);
        //watchSpecifications.add(WatchFilters.brandIsOneOf(List.of("Audemars Piguet", "Rolex", "Patek Phillipe")));
end
