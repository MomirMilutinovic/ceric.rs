package com.ftn.sbnz.backward.service.sessionManagement;

// Generated by Qwen3-Max

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class SessionCleanupService {

    private static final Logger log = LoggerFactory.getLogger(SessionCleanupService.class);

    @Value("${drools.session.idle-timeout-seconds:1800}") // 30 minutes default
    private long idleTimeoutSeconds;

    @Value("${drools.session.cleanup-interval-seconds:300}") // Every 5 minutes
    private long cleanupIntervalSeconds;

    private final SessionRegistry sessionRegistry;

    public SessionCleanupService(SessionRegistry sessionRegistry) {
        this.sessionRegistry = sessionRegistry;
    }

    @Scheduled(fixedRateString = "${drools.session.cleanup-interval-seconds:300}000")
    public void cleanupIdleSessions() {
        log.debug("Starting cleanup of idle KieSessions...");

        Map<String, SessionWrapper> idleSessions = sessionRegistry.getIdleSessions(idleTimeoutSeconds);

        if (idleSessions.isEmpty()) {
            log.debug("No idle sessions found.");
            return;
        }

        log.info("Found {} idle sessions to dispose.", idleSessions.size());

        for (Map.Entry<String, SessionWrapper> entry : idleSessions.entrySet()) {
            String sessionId = entry.getKey();
            SessionWrapper wrapper = entry.getValue();

            try {
                wrapper.dispose();
                sessionRegistry.removeSession(sessionId);
                log.info("Disposed idle session: {}", sessionId);
            } catch (Exception e) {
                log.error("Failed to dispose session: {}", sessionId, e);
            }
        }

        log.info("Cleanup completed. {} sessions remain active.", sessionRegistry.size());
    }
}